package com.anp.calc;import org.testng.Assert;import org.testng.annotations.BeforeTest;import org.testng.annotations.Test;import java.io.IOException;import java.io.InputStream;import java.util.Properties;/** * Created by Anastasia Pauliuchuk on 10/10/2017. */public class CalcTest {    private static final String TEST_DATA_FILENAME = "testData.properties";    private Calc calc = new Calc();    private Properties properties;    @BeforeTest    public void readTestDataFile() {        InputStream is = null;        Class cls;        cls = CalcTest.class;        ClassLoader classLoader = cls.getClassLoader();        try {            is = classLoader.getResourceAsStream(TEST_DATA_FILENAME);        } catch (Exception e) {            e.printStackTrace();        }        properties = new Properties();        try {            properties.load(is);        } catch (IOException e) {            e.printStackTrace();        }    }    //plain calculation    @Test    public void testPlainCount() throws Exception {        Assert.assertEquals(calc.count(properties.getProperty("plainExpr")),                Double.parseDouble(properties.getProperty("plainResult")));    }    //non integer calculation    @Test    public void testNonIntCount() throws Exception {        Assert.assertEquals(calc.count(properties.getProperty("nonIntExpr")),                Double.parseDouble(properties.getProperty("nonIntResult")));    }    //negative numbers calculation    @Test    public void testNegativeCount() throws Exception {        Assert.assertEquals(calc.count(properties.getProperty("negativeExpr")),                Double.parseDouble(properties.getProperty("negativeResult")));    }    //round test    @Test    public void testRoundCount() throws Exception {        Assert.assertEquals(calc.count(properties.getProperty("roundTestExpr")),                Double.parseDouble(properties.getProperty("roundTestResult")));    }    //add zero    @Test    public void testCountAddZero() throws Exception {        Assert.assertEquals(calc.count(properties.getProperty("addZeroNum") + "+0.00"),                Double.parseDouble(properties.getProperty("addZeroNum")));    }    //minus zero    @Test    public void testCountSubZero() throws Exception {        Assert.assertEquals(calc.count(properties.getProperty("subZeroNum") + "-0.00"),                Double.parseDouble(properties.getProperty("subZeroNum")));    }    //zero multiply    @Test    public void testCountMultZero() throws Exception {        Assert.assertEquals(calc.count(properties.getProperty("multZeroNum") + "*0.00"), 0.00);    }    //div by zero    @Test(expectedExceptions = ArithmeticException.class)    public void testCountDivByZero() throws Exception {        final Double count = calc.count(properties.getProperty("divZeroNum") + "/0.00");    }    //wrong expression format    @Test(expectedExceptions = ExpressionFormatException.class)    public void testWrongExpression() throws Exception {        final Double count = calc.count(properties.getProperty("wrongExpression"));    }    //test boundary data    @Test(expectedExceptions = ExpressionFormatException.class)    public void testBoundary() throws Exception {        final Double count = calc.count(properties.getProperty("boundTestExpr"));    }}